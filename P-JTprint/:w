#include<iostream>
#include<pthread.h>

using namespace std;

class Print{
  public:
  Print(int K):k(K)
  {}
  ~Print(){
    pthread_mutex_destroy(&lock);
    pthread_cond_destroy(&fir);
    pthread_cond_destroy(&sec);
  }
  void Init(){
    pthread_mutex_init(&lock,NULL);
    pthread_cond_init(&fir,NULL);
    pthread_cond_init(&sec,NULL);
  }
  void Judge(){
    if(*base>k){
      flag=1;
      pthread_cond_signal(& fir);
      pthread_cond_signal(& sec);
    }
  }
  public:
    pthread_mutex_t lock;
    pthread_cond_t fir;
    pthread_cond_t sec;
    int k;
    int* base=new int(0);
    int flag=0;
};


void* fun1(void * arg){
  Print* p=(Print*)arg;
  while(1){
    cout<<"Now pthread1 in floor "<<p->base<<"\n"<<endl;
    if(p->flag){
      cout<<"pthread1 exit\n"<<endl;
      pthread_exit(NULL);
    }
   if(*(p->base)%2==1){
     cout<<"pthread1 sleep\n"<<endl;
     pthread_cond_signal(&p->sec);
     pthread_cond_wait(&p->fir,&p->lock);
   }
   cout<<"Pthread 1:"<<p->base<<endl;
   *(p->base)+=1;
   p->Judge();
  }
  return NULL;
}

void* fun2(void * arg){
  Print* p=(Print*)arg;
  while(1){
    cout<<"Now pthread2 in floor "<<p->base<<"\n"<<endl;
    if(p->flag){
      cout<<"pthread2 exit\n"<<endl;
      pthread_exit(NULL);
    }
    if(*(p->base)%2==0){
      cout<<"pthread2 sleep\n"<<endl;
     pthread_cond_signal(&p->fir);
     pthread_cond_wait(&p->sec,&p->lock);
    }
    cout<<"Pthread 2:"<<p->base<<endl;
    *(p->base)+=1;
    p->Judge();
  }
  return NULL;
}

int main(){
  int k;
  cin>>k;
  pthread_t tid[2];
  Print p(k);
  pthread_create(tid,NULL,fun1,(void*)&p);
  pthread_create(tid+1,NULL,fun2,(void*)&p);
  return 0;
}

